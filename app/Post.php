<?php

namespace App;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

/**
 * @method static allowed()
 */
class Post extends Model
{

    protected $fillable = [
        'title','body','iframe','excerpt','published_at','category_id','user_id'
    ];
    //Laravel y carbon no te toma aparte created y update otros campos fecha como lo mismo
    //si no como string para que lo valide hay que aclararlo

    protected $dates = ['published_at'];

    protected $appends = ['published_date'];





    protected static function boot()
    {
        parent::boot(); //TODO: Change the autogenerated stub
        static::deleting(function ($post){

            $post->tags()->detach();
//        foreach ($post->photos as $photo){
//            $photo->delete();
//        }
            $post->photos->each(function ($photo){
                $photo->delete();
            });

        });
    }

    public function getRouteKeyName()
    {
        return 'url';
    }

    public function category()// $post->category->name
    {
        //aquien pertenece? a categoria ...
        return $this->belongsTo(Category::class);
    }

    public function tags()
    {
        return $this->belongsToMany(Tag::class);
    }


    public function  photos(){
        return $this->hasMany(Photo::class);
    }

    public  function owner(){
        return $this->belongsTo(User::class, 'user_id');
    }

    public function scopePublished($query){

       $query->with(['category', 'tags','owner', 'photos'])
           ->whereNotNull('published_at')
            ->where('published_at', '<=', Carbon::now())
            ->orderBy('id', 'DESC')
            ;//la publicacion sea  menor o igual a la fecha actual

    }

    public function  scopeAllowed($query){

        if (auth()->user()->can('view', $this)){

            $posts = $query;
        }else{
            $query->where('user_id', auth()->id());
        }
    }

    public  function scopeByYearAndMonth($query){
         return  $query->selectRaw('year(published_at) year')
                    ->selectRaw('month(published_at) month')
                    ->selectRaw('monthName(published_at) monthname')
                    ->selectRaw('count(*) posts')
                    ->groupBy('year','month','monthname')
                    ->orderBy('published_at', 'DESC')
                    ->get();

    }

    public function isPublished(){
        $mytime = Carbon::now();
        return ! is_null($this->published_at) && $this->published_at < $mytime;
    }

    public  static  function create(array $attributes = [])
    {
        $attributes['user_id'] = auth()->id();
        $post = static::query()->create($attributes);

        $post->generateUrl();


        return $post;
    }
    public function generateUrl(){
        $url =Str::slug($this->title);

        if ($this::whereUrl($url)->exists()){
            $url ="{$url}.-{$this->id}";
        }

        $this->url = $url;
        $this->save();
    }

//    public function  setTitleAttribute($title)
//    {
//        $this->attributes['title'] = $title;
//
//        $originalUrl = $url = Str::slug($title);
//        $count=1;
//
//        while(){
//            $url = "{$originalUrl}-". ++$count;
//        }
//
//        $this->attributes['url'] = $url;
//    }

    public function setPublishedAtAttribute($published_at){
        $this->attributes['published_at'] = Carbon::parse($published_at);
    }

    public function setCategoryIdAttribute($category){
        $this->attributes['category_id'] = Category::find( $category) ? $category : Category::create(['name' => $category])->id;

    }

    public function syncTags($tags)
    {
        $tagIds = collect($tags)->map(function ($tag){
            return Tag::find($tag) ? $tag : Tag::create(['name' => $tag])->id;

        });

       return $this->tags()->sync($tagIds);
    }
    public  function getPublishedDateAttribute()
    {

        return optional(Carbon::parse($this->published_at))->locale('es')->translatedFormat('l d \d\e F');
    }
    public function viewType($home = ''){

        if($this->photos->count() === 1):
           return 'posts.photo';
        elseif($this->photos->count() > 1):
            return $home === 'home' ?'posts.carousel-preview' : 'posts.carousel';
        elseif($this->iframe):
             return 'posts.iframe';
        else:
             return $home === 'home' ? 'posts.simple' : 'posts.void';
        endif;
    }


}
